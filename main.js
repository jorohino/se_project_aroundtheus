!function(){"use strict";class e{constructor(e,t,s,r){let{name:o,link:i,_id:n}=e;this._name=o,this._link=i,this._id=n,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteButton=r}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButton(this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleLikeButton(){this._likeButton.classList.toggle("card__like-button_active")}removeCard(){this._cardEl.remove(),this._cardEl=null}getView(){return this._cardEl=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._likeButton=this._cardEl.querySelector(".card__like-button"),this._deleteButton=this._cardEl.querySelector(".card__delete-button"),this._cardImageEl=this._cardEl.querySelector(".card__image"),this._cardTitleEl=this._cardEl.querySelector(".card__title"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._cardTitleEl.textContent=this._name,this._setEventListeners(),this._cardEl}}class t{constructor(e,t){this.formEl=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inputs=Array.from(this.formEl.querySelectorAll(this._inputSelector)),this._submitButton=this.formEl.querySelector(this._submitButtonSelector),this._errorClass=e.errorClass,this._inputErrorClass=e.inputErrorClass,this._inactiveButtonClass=e.inactiveButtonClass}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputs.some((e=>!e.validity.valid))}_hideInputError(e){const t=this.formEl.querySelector(`#${e.id}-error`);t&&(e.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent="")}_showInputError(e,t){const s=this.formEl.querySelector(`#${e.id}-error`);s&&(e.classList.add(this._errorClass),e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass))}_toggleButtonState(){this._hasInvalidInput()?this._disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_disableButton(){this._submitButton.disabled=!0,this._submitButton.classList.add(this._inactiveButtonClass)}setEventListeners(){this._inputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this.formEl.addEventListener("submit",(e=>{e.preventDefault(),this._disableButton()})),this.setEventListeners()}resetValidation(){this._inputs.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close-button"))&&this.close()}))}}class r extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputs=this._popupForm.querySelectorAll("input"),this._popupSave=this._popupElement.querySelector(".modal__save")}close(){super.close()}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()}))}setSaving(e){this._popupSave.textContent=e?"Saving...":"Save"}}document.querySelectorAll(".modal");const o=document.querySelector("#profile__edit-button"),i=(document.querySelector("#edit-modal"),document.querySelector("#profile__name"),document.querySelector("#form__name-input"),document.querySelector("#form__description-input"),document.querySelector("#profile__description"),document.forms["edit-modal__form"],document.querySelector(".profile__pfp-button")),n=document.querySelector("#profile__add-button"),a=(document.querySelector("#add-modal"),document.forms["add-modal__form"]),l=(document.querySelector("#form__title-input"),document.querySelector("#form__url-input"),document.querySelector("#cards__list"),document.querySelector("#card__title"),document.querySelector("#card__image"),new class{constructor(e){this.baseUrl=e.baseUrl,this.headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this.baseUrl}/cards`,{headers:this.headers}).then(this._checkResponse)}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this.headers}).then(this._checkResponse)}updateUserInfo(e){return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this.headers,body:JSON.stringify({name:e.name,about:e.description})}).then(this._checkResponse)}updateUserAvatar(e){return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this.headers,body:JSON.stringify({avatar:e.avatar})}).then(this._checkResponse)}createCard(e){return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this.headers,body:JSON.stringify({name:e.title,link:e.url})}).then(this._checkResponse)}deleteCard(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this.headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this.baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this.headers}).then(this._checkResponse)}unlikeCard(e){return fetch(`${this.baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this.headers}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"c91d1d7e-9726-43c4-acb8-289510ab9429","Content-Type":"application/json"}})),c=new class{constructor(e){let{profileNameSelector:t,profileJobSelector:s,avatarSelector:r}=e;this._profileNameEl=document.querySelector(t),this._profileDescriptionEl=document.querySelector(s),this._avatarEl=document.querySelector(r)}getUserInfo(){return console.log("Getting user info:",this._profileNameEl.textContent,this._profileDescriptionEl.textContent,this._avatarEl?this._avatarEl.src:"Avatar element not found."),{name:this._profileNameEl.textContent,description:this._profileDescriptionEl.textContent,avatar:this._avatarEl}}setUserInfo(e){let{name:t,description:s}=e;console.log("Setting user info",t,s),this._profileNameEl.textContent=t,this._profileDescriptionEl.textContent=s}setAvatarUrl(e){console.log("Setting avatar url",e),e?this._avatarEl.src=e:console.error("Avatar element not found.")}}({profileNameSelector:"#profile__name",profileJobSelector:"#profile__description",avatarSelector:"#profile__pfp"}),d=new r("#edit-modal",(e=>{d.setSaving(!0),l.updateUserInfo(e).then((e=>{c.setUserInfo({name:e.name,description:e.about}),d.close()})).catch((e=>{console.error(e)})).finally((()=>{d.setSaving(!1)}))}));d.setEventListeners();const h=new r("#add-modal",(e=>{l.createCard(e).then((e=>{const{name:t,link:s,_id:r}=e,o=f({name:t,link:s,_id:r});p.addItem(o),h.close(),a.reset()})).catch((e=>{console.error(e)}))}));h.setEventListeners();const u=new r("#delete-modal",(()=>{u.card&&l.deleteCard(u.card._id).then((()=>{u.card.removeCard(),u.close()})).catch((e=>{console.error("Error deleting card:",e)}))}));u.setEventListeners();const _=new class extends s{constructor(e){super({popupSelector:e}),this._title=this._popupElement.querySelector(".popup-modal__title"),this._image=this._popupElement.querySelector(".popup-modal__image")}open(e){let{name:t,link:s}=e;this._title.textContent=t,this._image.alt=t,this._image.src=s,super.open()}}("#popup-modal");_.setEventListeners();const m=new r("#edit-avatar-modal",(e=>{console.log("Updating avatar with link:",e.avatar),l.updateUserAvatar({avatar:e.avatar}).then((e=>{c.setAvatarUrl(e.avatar),m.close()})).catch((e=>{console.error(e)}))}));m.setEventListeners();const p=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){console.log("Rendering items"),this._items.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Hartford",link:"https://images.unsplash.com/photo-1611008715758-e56c60b9476d?q=80&w=3774&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Boston",link:"https://images.unsplash.com/photo-1573524949339-b830334a31ee?q=80&w=3862&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"New York City",link:"https://images.unsplash.com/photo-1602940659805-770d1b3b9911?q=80&w=3864&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Philadelphia",link:"https://images.unsplash.com/photo-1517009572053-93fb56dfef49?q=80&w=3090&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Atlanta",link:"https://images.unsplash.com/photo-1579824966561-2e4d9f79fe9b?q=80&w=3774&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"},{name:"Miami",link:"https://images.unsplash.com/photo-1533106497176-45ae19e68ba2?q=80&w=3870&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"}],renderer:f},"#cards__list");function f(t){return console.log("Creating card with:",t),new e(t,"#cards__list-template",E,v).getView()}function E(e){let{name:t,link:s}=e;_.open({name:t,link:s})}function v(e){u.card=e,u.open()}p.renderItems(),o.addEventListener("click",(()=>{const e=c.getUserInfo();d.setInputValues({name:e.name,description:e.description.trim()}),d.open()})),n.addEventListener("click",(()=>{h.open()})),i.addEventListener("click",(()=>{m.open()}));const b={};var S;S={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(S.formSelector)).forEach((e=>{const s=new t(S,e),r=e.getAttribute("name");b[r]=s,s.enableValidation()})),l.getInitialCards().then((e=>{console.log(e),e.forEach((e=>{p.addItem(f(e))}))})).catch((e=>{console.error(e)})),l.getUserInfo().then((e=>{c.setUserInfo({name:e.name,description:e.about}),c.setAvatarUrl(e.avatar)})).catch((e=>{console.error(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,